/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
 * This code was autogenerated by RooClassFactory                            *
 *****************************************************************************/

#ifndef ROOEXPGAUSSEXP_H
#define ROOEXPGAUSSEXP_H

#include "RooAbsCategory.h"
#include "RooAbsPdf.h"
#include "RooAbsReal.h"
#include "RooCategoryProxy.h"
#include "RooRealProxy.h"

class RooExpGaussExp : public RooAbsPdf {
  public:
    RooExpGaussExp(){};
    RooExpGaussExp(const char * name, const char * title, RooAbsReal & _x, RooAbsReal & _mu, RooAbsReal & _sigma, RooAbsReal & _aLow, RooAbsReal & _aHigh);
    RooExpGaussExp(const RooExpGaussExp & other, const char * name = 0);
    virtual TObject * clone(const char * newname) const { return new RooExpGaussExp(*this, newname); };
    inline virtual ~RooExpGaussExp(){};

    Int_t    getAnalyticalIntegral(RooArgSet & allVars, RooArgSet & analVars, const char * rangeName = 0) const;
    Double_t analyticalIntegral(Int_t code, const char * rangeName = 0) const;

    Double_t getLogVal(const RooArgSet * set) const;

  protected:
    RooRealProxy x;
    RooRealProxy mu;
    RooRealProxy sigma;
    RooRealProxy aLow;
    RooRealProxy aHigh;

    const double invSqrt2 = 0.70710678;
    const double sqrtPi   = 1.7724539;

    Double_t evaluate() const;

  private:
    Double_t getNormalisationLowerTail() const;
    Double_t getNormalisationGaussian() const;
    Double_t getNormalisationHighTail() const;
    Double_t getCumulativeValue(Double_t z) const;

  private:
    ClassDef(RooExpGaussExp, 1);   // Gaussian centre with two low and high exponential tails
};

#endif
