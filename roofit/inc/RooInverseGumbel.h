/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
 * This code was autogenerated by RooClassFactory                            *
 *****************************************************************************/

#ifndef ROOINVERSEGUMBEL_H
#define ROOINVERSEGUMBEL_H

#include "RooAbsCategory.h"
#include "RooAbsPdf.h"
#include "RooAbsReal.h"
#include "RooCategoryProxy.h"
#include "RooRealProxy.h"

class RooInverseGumbel : public RooAbsPdf {
  public:
    RooInverseGumbel(){};
    RooInverseGumbel(const char * name, const char * title, RooAbsReal & _x, RooAbsReal & _mu, RooAbsReal & _sigma, RooAbsReal & _alpha);
    RooInverseGumbel(const RooInverseGumbel & other, const char * name = 0);
    virtual TObject * clone(const char * newname) const { return new RooInverseGumbel(*this, newname); };
    inline virtual ~RooInverseGumbel(){};

    // Int_t getAnalyticalIntegral( RooArgSet& allVars,  RooArgSet& analVars, const char* rangeName=0 ) const ;
    // Double_t analyticalIntegral( Int_t code, const char* rangeName=0 ) const ;

    // Double_t getLogVal(const RooArgSet* set) const ;

  protected:
    RooRealProxy x;
    RooRealProxy mu;
    RooRealProxy sigma;
    RooRealProxy alpha;

    Double_t evaluate() const;

  private:
    ClassDef(RooInverseGumbel, 1)   // Gaussian centre with two low and high exponential tails
};

#endif
