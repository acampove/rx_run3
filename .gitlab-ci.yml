# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

image: gitlab-registry.cern.ch/lhcb-docker/analysis-ci/el9:latest

default:
  tags:
    - cvmfs
  id_tokens:
    LBAP_CI_JOB_JWT:
      aud: https://lbap.app.cern.ch
variables:
    PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

cache:
    paths:
        - .cache/pip
before_script:
    - source /cvmfs/lhcb.cern.ch/lib/LbEnv 
    # - eval "$(apd-login)" not really needed! 
    # For debugging
stages : 
    - build_env 
    - tests
build_env:environment :
    stage : build_env
    script:
      - lb-conda-dev virtual-env default myenv
      #note : this is a fast way to get locally a myenv as spinoff of virtual-env default from conda
    artifacts : 
      paths :
        - ./myenv
build_env:cpp :
    stage : build_env 
    needs : 
      - build_env:environment
    script : 
      - ./myenv/run bash -c "mkdir build && cd build && cmake ../ && make"
    artifacts : 
      paths: 
        - ./build
tests:kernel_pyload_create: 
    stage : tests 
    needs : 
      - build_env:environment
      - build_env:cpp 
    script : 
      - ./myenv/run bash -c "python tests/test_kernel.py"

tests:kernel_pyload_cutholder: 
    stage : tests 
    needs : 
      - build_env:environment
      - build_env:cpp 
    script : 
      - ./myenv/run bash -c "python tests/test_cutreader.py"

# TODO : load the just-compiled c++ libs and test them in python?
# tests:load_python: 
#     stage : tests
#     needs : 
#       - build_env:environment
#       - build_env:cpp
#     script : 
#       - ./myenv/run bash -c "source setup.sh && python selection/test_reader_with_ap.py"
#     artifacts : 
#       paths: 
#         - ./plots/


